#include<iostream>
using namespace std;
const int  MAXSIZE= 100;
const int ERROR=0;
const int OK = 1;
void InitList(SqList& L);
//结构体先写一个顺序表，结点
typedef struct {
	int* elem;//储存空间的基地址
	int length;//当前长度
}SqList;


void main() {
	


}

//顺序表的初始化
//动态分配一段数组空间，使elem指向这段空间的首地址
//将表的当前长度设置weiling
void InitList(SqList& L) {
	//构造一个空的顺序表
	L.elem = new int[MAXSIZE];//为顺序表分配一个大小为MAXSIZE的数组空间
	if (!L.elem)
		exit(OVERFLOW);
	//储存分配失败退出
	L.length = 0;
}

//二：取值由位序取值
void GetElem(SqList L, int i, int& e) {//i为位置序号elem[i-1]为第i个数据元素
	//判断i的值是否合理
	if (i<1 || i>L.length)
		cout<<ERROR;
	e = L.elem[i - 1];//elem[i-1]单元储存第i 个元素,将第i 个元素赋值给e
	cout << "Ok";
}

//顺序表的查找
//从第一个元素起一次和e比较若找到则返回元素的位序I+1
//若未找到 返回0


int LocateElem(SqList L, int e) {
	//在顺序表中查找值为e 的数据元素，返回其序号
	for (int i = 0; i < L.length; i++) {
		if (L.elem[i] == e) return i + 1;
		return 0;
	}

}

//顺序表的插入
//1:判断插入的位置是否合法（1<=i<=n+1）,不合法返回ERROR
//2:判断顺序表的储存空间是否已满
//3:将第N个元素到第I位置元素依次向后移动一个位置
//4:将要插入的元素e放入第i个位置
//5: 表长加一

int ListInsert(SqList& L, int i, int e) {
	//在顺序表L中第I个位置插入新元素e，i 值的合法范围是1<=i<=L.length+1
	if ((i < 1) || (i > L.length + 1))
		return ERROR;
	if (L.length == MAXSIZE)
		return ERROR;
	for (int j = L.length-1 ; j >=i-1; j--) {//插入位置级以后的元素位置后移
		L.elem[j + 1] = L.elem[j];
	}
	L.elem[i - 1] = e;//将元素E放置第I个位置
	++L.length;
	return OK;//当表长达到预设的最大空间时，不能在插入
}
//顺序表的删除
// 1:盘断删除位置是否合法（1<=i<=n)
// 2：将第I+1个到第N个元素依次向前移动一个位置
// 3：表长减一

int ListDelete(SqList& L, int i) {
	//在顺序表中删除第i个元素，i的值合法范围为1<=i<=L.length
	if ((i < 1) || (i > L.length)) return ERROR;
	for (int j = i; j <= L.length-1; j++) {//将第i+1个元素到第N个元素依次向前移动一个位置
		L.elem[j-1] = L.elem[j];
	}
	--L.length;
	return OK;
}









